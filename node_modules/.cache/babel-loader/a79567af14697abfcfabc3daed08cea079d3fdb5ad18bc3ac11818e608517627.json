{"ast":null,"code":"import Contacts from \"../Data/Contacts.json\";\nfunction formatPhoneNumber(phoneNumber) {\n  const cleaned = ('' + phoneNumber).replace(/\\D/g, '');\n  const match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\n  if (match) {\n    return '(' + match[1] + ') ' + match[2] + match[3];\n  }\n  return null;\n}\nfunction isStringMadeOfLetters(str) {\n  const pattern = /^[a-zA-Z]+$/;\n  return pattern.test(str);\n}\nexport function getAge(date) {\n  const today = new Date();\n  let birthDate = date.substring(0, 10);\n  birthDate = new Date(birthDate);\n  let age = today.getFullYear() - birthDate.getFullYear();\n  const monthDiff = today.getMonth() - birthDate.getMonth();\n  if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birthDate.getDate()) {\n    age--;\n  }\n  return age;\n}\nexport function SearchData(input) {\n  let retContacts = JSON.parse(JSON.stringify(Contacts));\n  let name = \"\";\n  let age = \"\";\n  const arr = input.split(\" \");\n  if (arr.length > 3)\n    //can only take a max of 3 parameters\n    {\n      return null;\n    }\n  for (let elem of arr) {\n    if (isStringMadeOfLetters(elem)) {\n      if (name === \"\") {\n        name += elem.toLowerCase();\n      } else {\n        name = name + \" \" + elem;\n      }\n      console.log(name);\n      retContacts = retContacts.filter(contact => contact.name.toLowerCase() === name || contact.name.toLowerCase().split(' ').includes(name));\n    } else {\n      if (elem.length > 3 && elem.length < 9)\n        //input a number that isnt age or phone#\n        {\n          return [];\n        } else if (elem.length <= 3) {\n        age = elem;\n        retContacts = retContacts.filter(contact => \"\" + getAge(contact.birthday) === age);\n      } else {\n        const phoneNumber = formatPhoneNumber(elem);\n        console.log(phoneNumber);\n        retContacts = retContacts.filter(contact => phoneNumber === contact.phone_number);\n      }\n    }\n  }\n  if (retContacts.length === 0) {\n    return [];\n  }\n  return retContacts;\n}\n_c = SearchData;\nvar _c;\n$RefreshReg$(_c, \"SearchData\");","map":{"version":3,"names":["Contacts","formatPhoneNumber","phoneNumber","cleaned","replace","match","isStringMadeOfLetters","str","pattern","test","getAge","date","today","Date","birthDate","substring","age","getFullYear","monthDiff","getMonth","getDate","SearchData","input","retContacts","JSON","parse","stringify","name","arr","split","length","elem","toLowerCase","console","log","filter","contact","includes","birthday","phone_number","_c","$RefreshReg$"],"sources":["/Users/bengoldfried/PersonalProjects/BlingsProject/blings-project/src/Utils/SearchData.js"],"sourcesContent":["import Contacts from \"../Data/Contacts.json\"\n\n\n\n function formatPhoneNumber(phoneNumber) {\n    const cleaned = ('' + phoneNumber).replace(/\\D/g, '');\n    const match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/);\n    if (match) {\n    return '(' + match[1] + ') ' + match[2] + match[3];\n    }\n    return null;\n}\n\nfunction isStringMadeOfLetters(str) {\n    const pattern = /^[a-zA-Z]+$/;\n    return pattern.test(str);\n}\n      \nexport function getAge(date)\n{\n    const today = new Date();\n    let birthDate = date.substring(0, 10);\n    birthDate = new Date(birthDate);\n    let age = today.getFullYear() - birthDate.getFullYear();\n    const monthDiff = today.getMonth() - birthDate.getMonth();\n  \n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n      age--;\n    }\n  \n    return age;\n}\n\nexport function SearchData(input)\n{\n    let retContacts = JSON.parse(JSON.stringify(Contacts))\n    let name = \"\";\n    let age = \"\";\n    \n    const arr = input.split(\" \");\n    if(arr.length > 3) //can only take a max of 3 parameters\n    {\n        return null;\n    }\n\n    for(let elem of arr)\n    {\n        if(isStringMadeOfLetters(elem)) \n        {\n            if(name === \"\")\n                {name += elem.toLowerCase();}\n            else\n                {name = name + \" \" + elem;}     \n                console.log(name)       \n                retContacts = retContacts.filter(contact => (contact.name.toLowerCase() === name) || (contact.name.toLowerCase().split(' ').includes(name)));\n            }\n        else\n        {\n            if(elem.length > 3 && elem.length < 9) //input a number that isnt age or phone#\n            {\n                return [];\n            }\n            else if(elem.length <=3){\n                age = elem;\n                retContacts = retContacts.filter(contact => (\"\" + getAge(contact.birthday)) === age)\n            }\n            else{\n                const phoneNumber = formatPhoneNumber(elem);\n                console.log(phoneNumber);\n                retContacts = retContacts.filter(contact => phoneNumber === contact.phone_number);\n            }\n        }\n    }\n    if(retContacts.length === 0) {\n        return [];\n    }\n    return retContacts;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}